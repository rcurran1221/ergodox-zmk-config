#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define LAYER_MAIN 0
#define LAYER_FN 1
#define LAYER_SYMB 2
#define LAYER_NMPAD 3
#define LAYER_MOUSE 4
#define SHORT_COMBO_TIMEOUT 18
#define COMBO_TIMEOUT_LEFT 18
#define PRIOR_IDLE_COMBO 150
#define HOME_ROW_MOD_IDLE 150
#define MOD_FLAVOR "balanced"
#define MOD_TAP_TERM 280
#define MOD_QUICK_TAP 200

&sk { quick-release; };

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <MOD_TAP_TERM>;
            hold-trigger-on-release;
            quick-tap-ms = <MOD_QUICK_TAP>;
            require-prior-idle-ms = <HOME_ROW_MOD_IDLE>;
            flavor =
            MOD_FLAVOR;
            hold-trigger-key-positions = <65 66 71 75 70 69 72 76 67 68 73 74 48 22 8 9 35 49 23 10 24 50 36 60 61 51 37 25 11 12 26 38 52 62 63 53 39 27 13 14 28 40 54 64>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <MOD_TAP_TERM>;
            hold-trigger-on-release;
            quick-tap-ms = <MOD_QUICK_TAP>;
            require-prior-idle-ms = <HOME_ROW_MOD_IDLE>;
            flavor =
            MOD_FLAVOR;
            hold-trigger-key-positions = <66 68 73 74 76 72 67 71 75 70 69 65 47 21 7 6 46 34 20 19 33 45 59 5 4 18 32 44 58 57 43 31 17 3 2 16 42 30 56 55 41 29 15 1>;
        };

        sticky_shift: sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_SHIFT";
            bindings = <&sk>;
            #binding-cells = <1>;
            release-after-ms = <300>;
            quick-release;
        };

        shifty: shifty {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTY";
            bindings = <&sticky_shift LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        require-prior-idle-ms = <PRIOR_IDLE_COMBO>;

        left_parent {
            bindings = <&hmr RS(RIGHT_CONTROL) LEFT_PARENTHESIS>;
            key-positions = <36 37>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        right_paren {
            bindings = <&hmr RC(RIGHT_ALT) RIGHT_PARENTHESIS>;
            key-positions = <37 38>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <24 25>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <25 26>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <50 51>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <51 52>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        underscore {
            bindings = <&hmr LC(LEFT_ALT) UNDERSCORE>;
            key-positions = <32 31>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        dash {
            bindings = <&hmr LS(LEFT_CONTROL) MINUS>;
            key-positions = <33 32>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 18>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <18 17>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        bang {
            bindings = <&kp EXCLAMATION>;
            key-positions = <16 17>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <42 43>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        // star {
        //   bindings = <&kp ASTERISK>;
        // key-positions = <31 32>;
        //timeout-ms = <SHORT_COMBO_TIMEOUT>;
        //require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
        //layers = <0>;
        //};

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <53 52>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <20 19>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <46 45>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        greaterthan {
            bindings = <&kp GREATER_THAN>;
            key-positions = <49 50>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        qmark {
            bindings = <&kp QUESTION>;
            key-positions = <38 39>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        car {
            bindings = <&hmr LS(LEFT_ALT) CARET>;
            key-positions = <33 31>;
            timeout-ms = <COMBO_TIMEOUT_LEFT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };

        dollar {
            bindings = <&hmr RS(RIGHT_ALT) DOLLAR>;
            key-positions = <36 38>;
            timeout-ms = <SHORT_COMBO_TIMEOUT>;
            require-prior-idle-ms = <PRIOR_IDLE_COMBO>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAIN {
            bindings = <
&bootloader
&kp EQUAL    &kp NUMBER_1     &kp NUMBER_2     &kp NUMBER_3         &kp NUMBER_4       &kp NUMBER_5  &kp PRINTSCREEN    &none          &kp NUMBER_6   &kp NUMBER_7        &kp NUMBER_8          &kp NUMBER_9      &kp NUMBER_0              &kp MINUS
&kp DELETE   &kp Q            &kp W            &kp E                &kp R              &kp T         &kp CAPSLOCK       &none          &kp Y          &kp U               &kp I                 &kp O             &kp P                     &kp BACKSLASH
&kp ESCAPE   &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G                                           &kp H          &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
&kp GRAVE    &kp Z            &kp X            &kp C                &kp V              &kp B         &shifty            &shifty        &kp N          &kp M               &kp COMMA             &kp PERIOD        &kp SLASH                 &kp PAGE_UP
&tog 3       &kp HOME         &kp END          &kp LEFT_ARROW       &kp RIGHT                                                                         &kp UP_ARROW        &kp DOWN              &kp LEFT_BRACKET  &kp RIGHT_BRACKET         &kp PAGE_DOWN
                                                                                       &shifty       &kp HOME           &kp END        &shifty
                                                                    &kp ENTER          &kp TAB       &kp PAGE_UP        &kp PAGE_DOWN  &kp BACKSPACE  &kp SPACE
                                                                                                     &tog 2             &mo 1
            >;
        };

        fkeys {
            bindings = <
&bootloader
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none    &none  &none  &none    &none    &none    &none    &bootloader
&out OUT_USB  &kp F1        &kp F2        &kp F3        &kp F4        &none  &none    &none  &none  &kp F13  &kp F14  &kp F15  &kp F16  &none
&out OUT_BLE  &kp F5        &kp F6        &kp F7        &kp F8        &none                  &none  &kp F17  &kp F18  &kp F19  &kp F20  &none
&none         &kp F9        &kp F10       &kp F11       &kp F12       &none  &none    &to 4  &none  &kp F21  &kp F22  &kp F23  &kp F24  &bt BT_CLR
&none         &none         &none         &none         &none                                       &none    &none    &none    &none    &none
                                                                      &none  &none    &none  &none
                                                        &none         &none  &none    &none  &none  &none
                                                                             &none    &none
            >;
        };

        numbers {
            bindings = <
&bootloader
&none        &none      &none         &none           &none         &none  &none                   &none                 &none          &none         &none         &none         &none  &none
&kp TAB      &none      &none         &none           &none         &none  &none                   &none                 &none          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &none  &none
&none        &kp SLASH  &kp ASTERISK  &kp MINUS       &kp PLUS      &none                                                &none          &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none  &kp BACKSPACE
&none        &none      &none         &none           &kp PERIOD    &none  &kp C_BRIGHTNESS_DEC    &kp C_BRIGHTNESS_INC  &none          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none
&none        &none      &none         &kp LEFT_ARROW  &kp UP_ARROW                                                                      &none         &kp N0        &none         &none  &to 0
                                                                    &none  &none                   &none                 &none
                                                      &none         &none  &none                   &none                 &kp BACKSPACE  &none
                                                                           &tog 2                  &none
            >;
        };

        mouse {
            bindings = <
&bootloader
&none        &none  &none  &none  &none  &none  &none    &none  &none           &none            &none           &none            &none  &none
&none        &none  &none  &none  &none  &none  &none    &none  &msc SCRL_LEFT  &msc SCRL_RIGHT  &mmv MOVE_UP    &none            &none  &none
&none        &none  &none  &none  &none  &none                  &msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &none
&none        &none  &none  &none  &none  &none  &none    &none  &msc SCRL_DOWN  &mkp LCLK        &mkp MCLK       &mkp RCLK        &none  &none
&tog 3       &none  &none  &none  &none                                         &none            &none           &none            &none  &none
                                         &none  &none    &none  &none
                                  &none  &none  &none    &none  &none           &none
                                                &none    &none
            >;
        };

        gaming {
            bindings = <
&bootloader
&kp GRAVE       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp NUMBER_4      &kp NUMBER_5  &kp ESCAPE      &to 0          &kp NUMBER_6   &kp NUMBER_7        &kp NUMBER_8          &kp NUMBER_9      &kp NUMBER_0              &kp MINUS
&kp TAB         &kp Q         &kp W         &kp E           &kp R             &kp T         &kp CAPSLOCK    &kp C_MUTE     &kp Y          &kp U               &kp I                 &kp O             &kp P                     &kp BACKSLASH
&kp CAPS        &kp A         &kp S         &kp D           &kp F             &kp G                                        &kp H          &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
&kp LEFT_SHIFT  &kp Z         &kp X         &kp C           &kp V             &kp B         &shifty         &shifty        &kp N          &kp M               &kp COMMA             &kp PERIOD        &kp SLASH                 &kp PAGE_UP
&none           &kp HOME      &kp END       &kp LEFT_ARROW  &kp LEFT_CONTROL                                                              &kp UP_ARROW        &kp DOWN              &kp LEFT_BRACKET  &kp RIGHT_BRACKET         &kp PAGE_DOWN
                                                                              &shifty       &kp HOME        &kp END        &shifty
                                                            &kp SPACE         &kp SPACE     &kp PAGE_UP     &kp PAGE_DOWN  &kp BACKSPACE  &kp SPACE
                                                                                            &kp RETURN      &mo 1
            >;
        };
    };
};
